plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
#plot the original Galton data points with larger dots for more freq pts
y <- galton$child
x <- galton$parent
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .07 * freqData$freq, xlab = "parent", ylab = "child")
#original regression line, children as outcome, parents as predictor
abline(mean(y) - mean(x) * cor(y, x) * sd(y) / sd(x), #intercept
sd(y) / sd(x) * cor(y, x),  #slope
lwd = 3, col = "red")
#new regression line, parents as outcome, children as predictor
abline(mean(y) - mean(x) * sd(y) / sd(x) / cor(y, x), #intercept
sd(y) / cor(y, x) / sd(x), #slope
lwd = 3, col = "blue")
#assume correlation is 1 so slope is ratio of std deviations
abline(mean(y) - mean(x) * sd(y) / sd(x), #intercept
sd(y) / sd(x),  #slope
lwd = 2)
points(mean(x), mean(y), cex = 2, pch = 19) #big point of intersection
library(UsingR); data(galton); library(manipulate): library(ggplot2)
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
freqData
names(freqData) <- c("child", "parent", "freq")
freqData
str(freqData)
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
str(freqData)
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
head(freqData)
library(UsingR); data(galton); library(manipulate); library(ggplot2)
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
g
print(g)
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
library(datasets)
data("Seatbelts")
library(dplyr)
seatbelts <- data.frame(Seatbelts)
head(seatbelts)
seatbelts <- mutate(seatbelts,
dkb = 1 * DriversKilled > 119,
pp = (PetrolPrice - mean(PetrolPrice))/sd(PetrolPrice),
mm = kms/1000,
mmc = mm - mean(mm))
head(seatbelts)
seatbelts <- mutate(seatbelts,
dkb = 1 * (DriversKilled > 119),
pp = (PetrolPrice - mean(PetrolPrice))/sd(PetrolPrice),
mm = kms/1000,
mmc = mm - mean(mm))
head(seatbelts)
fit <- glm(cbind(DriversKilled, drivers - DriversKilled) ~ pp + mmc + law, family = "binomial", data = seatbelts)
summary(fit)$coef
fit
fit1 <- glm(dkb ~ law, family = "binomial", data = seatbelts)
fit2 <- glm(dkb ~ law + pp, family = "binomial", data = seatbelts)
fit3 <- glm(dkb ~ law + pp + mmc, family = "binomial", data = seatbelts)
anova(fit1, fit2, fit3)
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="./data/gaData.rda",method="curl")
load("./data/gaData.rda")
gaData$julian <- julian(gaData$date)
head(gaData)
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="./data/gaData.rda",method="curl")
load("./data/gaData.rda")
gaData$julian <- julian(gaData$date)
head(gaData)
head(seatbelts)
pfit <- glm(DriversKilled ~ kms + PetrolPrice + law, family = "poison", data = seatbelts)
pfit <- glm(DriversKilled ~ kms + PetrolPrice + law, family = "poisson", data = seatbelts)
summary(pfit)$coef
library(MASS)
data("shuttle")
head(shuttle)
?shuttle
library(dplyr)
shttl <- mutate(shuttle,y = 1 * (use == "auto"))
shttl
head(shttl)
fit1 <- glm(y ~ wind, family = "binomial", data = shttl)
summary(fit1)$coef
exp(0.03181183)
exp(0.25131443)
levels(shttl$wind)
fit1 <- glm(y ~ wind - 1, family = "binomial", data = shttl)
summary(fit1)$coef
exp(0.2513144)/exp(0.2831263)
fit2 <- glm(y ~ wind + mag - 1, family = "binomial", data = shttl)
fit2 <- glm(y ~ wind + magn - 1, family = "binomial", data = shttl)
summary(fit2)$coef
exp(3.635093e-01)/exp(3.955180e-01)
fit3 <- glm(I(1 - y) ~ wind - 1, family = "binomial", data = shttl)
summary(fit1)$coef
summary(fit3)$coef
data("InsectSprays")
head(InsectSprays)
fit4 <- glm(count ~ factor(spray) - 1, family = "poisson", data = InsectSprays)
summary(fit4)$coef
exp(2.6741486)/exp(2.7300291)
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
fit6 <- lm(y ~ xMat - 1)
summary(fit6)$coef
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
fit6 <- lm(y ~ xMat - 1)
summary(fit6)$coef
yhat <- predict(fit6)
yhat
(yhat[10]-yhat[6])/4
308/44
library(datasets)
library(dplyr)
library(ggplot2)
data("mtcars")
head(mtcars)
nrows(mtcars)
nrow(mtcars)
str(mtcars)
p1 <- ggplot(mtcars, aes(x = factor(am), y = mpg)) +
geom_boxplot() +
labs(title = "The MPG for automatic and manual transmission cars",
y = "MPG") +
scale_x_discrete(labels = c(Automatic, Manual)) +
theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16))
p1 <- ggplot(mtcars, aes(x = factor(am), y = mpg)) +
geom_boxplot() +
labs(title = "The MPG for automatic and manual transmission cars",
y = "MPG") +
scale_x_discrete(labels = c("Automatic", "Manual")) +
theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16))
p1
p1 <- ggplot(mtcars, aes(x = factor(am), y = mpg)) +
geom_boxplot() +
labs(title = "The MPG for automatic and manual transmission cars",
y = "MPG") +
scale_x_discrete(labels = c("Automatic", "Manual")) +
theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16))
p1
p1 <- ggplot(mtcars, aes(x = factor(am), y = mpg)) +
geom_boxplot() +
labs(title = "The MPG for automatic and manual transmission cars",
y = "MPG") +
# scale_x_discrete(labels = c("Automatic", "Manual")) +
theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16))
p1
p1 <- ggplot(mtcars, aes(x = factor(am), y = mpg)) +
geom_boxplot() +
labs(title = "The MPG for automatic and manual transmission cars",
y = "MPG") +
# scale_x_discrete(labels = c("Automatic", "Manual")) +
theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16))
p1
p1 <- ggplot(mtcars, aes(x = factor(am), y = mpg)) +
geom_boxplot() +
labs(title = "The MPG for automatic and manual transmission cars",
y = "MPG") +
scale_x_discrete(labels = c("Automatic", "Manual")) +
theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16))
p1
summary(lm(mpg ~ factor(am) - 1, data = mtcars))$coef
t.test(mpg ~ factor(am), paired = FALSE, data = mtcars)
fit1 <- lm(mpg ~ factor(am), data = mtcars)
summary(fit1)
fit2 <- update(fit1, mpg ~ factor(am) + cyl)
fit3 <- update(fit2, mpg ~ factor(am) + cyl + disp)
fit4 <- update(fit3, mpg ~ factor(am) + cyl + disp + hp)
fit5 <- update(fit4, mpg ~ factor(am) + cyl + disp + hp + wt)
anova(fit1, fit2, fit3, fit4, fit5)
bestFit <- lm(mpg ~ factor(am) + cyl + wt, data = mtcars)
summary(bestFit)
par(mfrow = c(2, 2))
plot(bestFit)
bestFit <- lm(mpg ~ factor(am) + cyl + wt, data = mtcars)
summary(bestFit)$coef
fit1 <- lm(mpg ~ factor(am), data = mtcars)
summary(fit1)$coef
t.test(mpg ~ factor(am), paired = FALSE, data = mtcars)
t.test(mpg ~ factor(am), paired = FALSE, data = mtcars)$p-value
t.test(mpg ~ factor(am), paired = FALSE, data = mtcars)$p
summary(t.test(mpg ~ factor(am), paired = FALSE, data = mtcars))
t.test(mpg ~ factor(am), paired = FALSE, data = mtcars)$p.value
library(AppliedPredictiveModeling)
intall.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(ggplot2); library(caret)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(AlzheimerDisease)
head("AlzheimerDisease")
head(AlzheimerDisease)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
mixtures
head(mixtures)
head(training)
inTrain
head(predictors)
head(training)
qplot(training$CompressiveStrength, color=factor(training$Cement))
range(training$Cement)
mean(training$Cement)
install.packages("Hmisc")
library(Hmisc)
Cementcut <- cut2(training$Cement, g=5)
qplot(training$CompressiveStrength, color=Cementcut)
head(mixtures)
blacut <- cut2(training$BlastFurnaceSlag)
qplot(training$CompressiveStrength, color=blacut)
qplot(training$CompressiveStrength)
Cementcut <- cut2(training$Cement)
qplot(index(training),training$CompressiveStrength, color=Cementcut)
inTrain
qplot(inTrain,training$CompressiveStrength, color=Cementcut)
qplot(inTrain,training$CompressiveStrength, color=blacut)
head(mixtures)
flycut <- cut2(training$FlyAsh)
qplot(inTrain,training$CompressiveStrength, color=flycut)
watcut <- cut2(training$Water)
qplot(inTrain,training$CompressiveStrength, color=watcut)
supcut <- cut2(training$Superplasticizer)
qplot(inTrain,training$CompressiveStrength, color=supcut)
coacut <- cut2(training$CoarseAggregate)
qplot(inTrain,training$CompressiveStrength, color=coacut)
fincut <- cut2(training$FineAggregate)
qplot(inTrain,training$CompressiveStrength, color=fincut)
agecut <- cut2(training$Age)
qplot(inTrain,training$CompressiveStrength, color=agecut)
qplot(Superplasticcizer, data = mixtures, plot = "hist")
qplot(mixtures$Superplasticcizer, plot = "hist")
qplot(Superplasticcizer, data = training, geom = "hist")
qplot(Superplasticcizer, data = training, geom = "histogram")
qplot(Superplasticizer, data = training, geom = "histogram")
range(training$Superplasticizer)
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
str(training)
newtraining <- subset(training, "IL" %in% colnames(training))
newtraining
head(training)
colnames(training)
"IL" %in% colnames(training)
grepl("IL", colnames(training))
newtraining <- training[, grepl("IL", colnames(training))]
head(newtraining)
training
head(training)
newtraining <- data.frame(diagnosis, training[, grepl("IL", colnames(training))])
newtraining <- training[, c("diagnosis", grepl("IL", colnames(training)))]
newtraining <- data.fram(training$diagnosis, training[, grepl("IL", colnames(training))])
newtraining <- data.frame(training$diagnosis, training[, grepl("IL", colnames(training))])
newtraining
preProc <- preProcess(training[,grep('^IL',names(training))],method="pca",thres=.9)
preProc
training[,grep('^IL',names(training))
]
preProc <- preProcess(training[,grep('^IL',names(training))],method="pca",thres=.8)
preProc
newtraining <- data.frame(training$diagnosis, training[, grep("^IL", names(training))])
names(newtraining)
model1 <- train(newtraining$training.diagnosis ~ ., method="glm", data=newtraining)
install.packages(e1071)
install.packages("e1071")
model1 <- train(newtraining$training.diagnosis ~ ., method="glm", data=newtraining)
model1 <- train(training.diagnosis ~ ., method="glm", data=newtraining)
model1
preProc
pcamodel <- preProcess(training[,grep('^IL',names(training))],method="pca", pcaComp = 7)
trainPC <- predice(pcamodel, newtraining)
trainPC <- predict(pcamodel, newtraining)
model2 <- train(training.diagnosis ~ ., method="glm", data=trainPC)
model2
newtesting <- data.fram(testing$diagnosis, testing[,grep("^IL", names(testing))])
newtesting <- data.frame(testing$diagnosis, testing[,grep("^IL", names(testing))])
model1 <- train(testing.diagnosis ~ ., method="glm", data=newtesting)
model1
preProc <- preProcess(training[,grep('^IL',names(training))],method="pca",thres=.8)
source("https://bioconductor.org/biocLite.R")
biocLite("DiffBind")
browseVignettes("DiffBind")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
str(segmentationOriginal)
x <- split(segmentationOriginal, segmentationOriginal$Case, drop = TRUE)
x
str(x)
str(x[1])
head(x[1])
x <- split(segmentationOriginal, segmentationOriginal$Case, drop = TRUE)[1]
test <- x[1]
training <- x[2]
head(test)
test[,class]
test$class
test$Case
names(test)
test
head(test)
class(test)
test <- as.data.frame(x[1])
test$Test.Case
test <- data.frame(x[1])
str(test)
test$Test.Case
training <- data.fram(x[2])
training <- data.frame(x[2])
head(training)
x[2]
x <- split(segmentationOriginal, segmentationOriginal$Case, drop = TRUE)
test <- data.frame(x[1])
training <- data.frame(x[2])
training$Train.Case
seed(125)
set.seed(125)
names(training)
test <- subset(segmentationOriginal, Case == "Test")
training <- subset(segmentationOriginal, Case == "Train")
head(test)
head(training)
cart <- train(Class ~ ., method = "rpart", data = "training")
cart <- train(Class ~ ., method = "rpart", data = training)
library(rpart)
install.packages("rpart")
install.packages("rpart")
library(rpart)
intall.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
library(CORElearn)
library(Hmisc)
library(rpart)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
test <- subset(segmentationOriginal, Case == "Test")
training <- subset(segmentationOriginal, Case == "Train")
set.seed(125)
cart <- train(Class ~ ., method = "rpart", data = training)
cart$finalModel
newset <- data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1 = 2)
newset <- rbind(newset, c(50000, 10, 100), c(57000, 8, 100))
newset
newset <- data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1 = 2)
newset <- rbind(newset, c(50000, 10, 100), c(57000, 8, 100))
newset
predict(cart, newdata = newset)
head(training)
names(test)
install.packages("rattle")
library(rattle)
install.packages("RGtk2")
update.packages(checkBuilt = TRUE)
# question 1
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
test <- subset(segmentationOriginal, Case == "Test")
training <- subset(segmentationOriginal, Case == "Train")
set.seed(125)
cart <- train(Class ~ ., method = "rpart", data = training)
library(rattle)
install.packages("rattle")
library(rattle)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
test <- subset(segmentationOriginal, Case == "Test")
training <- subset(segmentationOriginal, Case == "Train")
set.seed(125)
cart <- train(Class ~ ., method = "rpart", data = training)
library(rattle)
plot(cart$finalModel, uniform=T)
test(cart$finalModel, use.n=T, all=T, cex=.8)
text(cart$finalModel, use.n=T, all=T, cex=.8)
install.packages("pgmm")
library(pgmm)
data(olive)
str(olive)
olive
olive = olive[,-1]
olive
fit <- train(Area ~ ., method = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(fit, newdata = newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
data(SAheart)
data(SAheart)
SAheart
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
dim(SAheart)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(trainSA)
modelfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
trainPredict <- predict(modelfit, trainSA)
testPredict <- predict(modelfit, newdata = testSA)
missClass(trainSA, trainPredict)
missClass(testSA, testPredict)
missClass(trainSA$chd, trainPredict)
missClass(testSA$chd, testPredict)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
str(vowel.train)
str(vowel.test)
set.seed(33833)
model <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
model
?varImp
varImp(model)
model <- train(y ~ ., data = vowel.train, method = "rf")
varImp(model)
model2 <- randomForest(y ~ ., data = vowel.train)
varImp(model2)
order(varImp(model2), decreasing = T)
install.packages("RGtk2", depen=T)
setwd("/Users/zliu11/R_for_DScourses/Course8/CourseProject")
getwd()
setwd("/Users/zliu11/R_for_DScourses/Course8/CourseProject")
getwd()
trn <- read.csv("pml-training.csv")
trn
str(trn)
